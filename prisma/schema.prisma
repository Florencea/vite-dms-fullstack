generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.sqlite"
}

model I18n {
  pid         Int       @id @default(autoincrement())
  id          String    @unique @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  code        String
  value       String
  locale      Locale    @relation(fields: [localePid], references: [pid])
  localePid   Int
  function    Function  @relation(fields: [functionPid], references: [pid])
  functionPid Int

  @@unique([code, localePid])
}

model User {
  pid        Int         @id @default(autoincrement())
  id         String      @unique @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  account    String      @unique
  password   String
  email      String      @unique
  name       String
  phone      String?
  website    String?
  posts      Post[]
  albums     Album[]
  todos      Todo[]
  UserGroups UserGroup[]
}

model UserGroup {
  pid       Int       @id @default(autoincrement())
  id        String    @unique @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userPid], references: [pid])
  userPid   Int
  group     Group     @relation(fields: [groupPid], references: [pid])
  groupPid  Int

  @@unique([userPid, groupPid])
}

model Group {
  pid           Int             @id @default(autoincrement())
  id            String          @unique @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  code          String          @unique
  name          String
  editable      Boolean         @default(true)
  UserGroups    UserGroup[]
  GroupFunction GroupFunction[]
}

model GroupFunction {
  pid         Int       @id @default(autoincrement())
  id          String    @unique @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  group       Group     @relation(fields: [groupPid], references: [pid])
  groupPid    Int
  function    Function  @relation(fields: [functionPid], references: [pid])
  functionPid Int

  @@unique([groupPid, functionPid])
}

model Function {
  pid           Int             @id @default(autoincrement())
  id            String          @unique @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  code          String          @unique
  name          String
  GroupFunction GroupFunction[]
  I18n          I18n[]
}

model Locale {
  pid              Int                @id @default(autoincrement())
  id               String             @unique @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  code             String             @unique
  name             String
  Post_Translation Post_Translation[]
  I18n             I18n[]
}

model Post {
  pid              Int                @id @default(autoincrement())
  id               String             @unique @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  user             User               @relation(fields: [userpId], references: [pid])
  userpId          Int
  comments         Comment[]
  Post_Translation Post_Translation[]
}

model Post_Translation {
  pid       Int       @id @default(autoincrement())
  id        String    @unique @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  title     String
  body      String?
  post      Post      @relation(fields: [postPid], references: [pid])
  postPid   Int
  locale    Locale    @relation(fields: [localePid], references: [pid])
  localePid Int
}

model Comment {
  pid       Int       @id @default(autoincrement())
  id        String    @unique @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  name      String
  email     String
  body      String?
  postpId   Int
  post      Post      @relation(fields: [postpId], references: [pid])
}

model Album {
  pid       Int       @id @default(autoincrement())
  id        String    @unique @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  title     String
  userpId   Int
  user      User      @relation(fields: [userpId], references: [pid])
  photos    Photo[]
}

model Photo {
  pid       Int       @id @default(autoincrement())
  id        String    @unique @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  url       String
  albumpId  Int
  albums    Album     @relation(fields: [albumpId], references: [pid])
}

model Todo {
  pid       Int       @id @default(autoincrement())
  id        String    @unique @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  title     String
  completed Boolean
  userpId   Int
  user      User      @relation(fields: [userpId], references: [pid])
}
